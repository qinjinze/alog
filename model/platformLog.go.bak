package model

import (
	"alog/utils"
	"runtime"
	"time"

	_ "alog/utils"
	"github.com/beego/beego/orm"
	_ "github.com/go-sql-driver/mysql"
	"github.com/wonderivan/logger"
)

// C端用户日志
type PlatformLog struct {
	Id         int64     `json:"PlatformLogId"`                                        //Id
	Level      string    `orm:"size(10);NULL;description(日志等级)" json:"Level"`          //
	LevelInt   int       `orm:"size(2);NULL;description(日志等级)" json:"LevelInt"`        //
	Function   string    `orm:"size(100);NULL;description(功能模块)" json:"Function"`      //
	RequestId  string    `orm:"size(30);NULL;description(每次请求的唯一id)" json:"RequestId"` //
	Token      string    `orm:"size(255);NULL;description(用户登录唯一id)" json:"Token"`     //
	UserName   string    `orm:"size(255);NULL;description(账户)" json:"UserName"`        //
	Content    string    `orm:"size(255);NULL;description(日志内容)" json:"Content"`       //
	LogTime    time.Time `orm:"size(15);NULL;description(日志时间)" json:"LogTime"`
	CreateTime time.Time `orm:"size(6);auto_now_add;type(datetime);NULL;description(创建时间)" json:"CreateTime"`
	Seller     string    `orm:"size(255);NULL;description(商家简称：网店名称)" json:"Seller"` //
	SellerId   string    `orm:"size(100);NULL;description(商家编号)" json:"SellerId"`    //

}

//var Orm = orm.NewOrm()

//func init() {
//	ORM = GetOrmObject()
//}

// func PlatformLogInit() {
func dinit() {

	logger.Info("init PlatformLogInit model")
	sysType := runtime.GOOS
	logger.Info("sysType=", sysType)

	if sysType == "linux" {
		//LINUX系统
		logger.SetLogger(`{"File":{"filename":"/data/logs/remind/reminder.log","level":"TRAC","daily":false,"maxlines":700000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	}
	if sysType == "windows" {
		// windows系统
		logger.SetLogger(`{"File":{"filename":"reminder.log","level":"TRAC","daily":false,"maxlines":700000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	}

	//logger.SetLogger(`{"File":{"filename":"../logs/app.log","level":"TRAC","daily":false,"maxlines":1000000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	//调用什么驱动
	err := orm.RegisterDriver("mysql", orm.DRMySQL)
	if err != nil {
		logger.Error(err)
		return
	}
	logger.Info("utils.G_mysql_addr=", utils.G_mysql_addr, "port=", utils.G_mysql_port)
	logger.Info("username=", utils.G_mysql_dbname, "utils.G_mysql_dbPassword=", utils.G_mysql_dbPassword)
	//连接数据   ( 默认参数 ，mysql数据库 ，"数据库的用户名 ：数据库密码@tcp("+数据库地址+":"+数据库端口+")/库名？格式",默认参数）
	err = orm.RegisterDataBase("platformLog", "mysql", utils.G_mysql_dbname+":"+utils.G_mysql_dbPassword+"@tcp("+utils.G_mysql_addr+":"+utils.G_mysql_port+")/platformLog?charset=utf8mb4&loc=Local", 101, 100)
	//err = orm.RegisterDataBase("default", "mysql", utils.G_mysql_dbname+":"+utils.G_mysql_dbPassword+"@tcp("+utils.G_mysql_addr+":"+utils.G_mysql_port+")/dingxin_main?timeout=30s&loc=Local&parseTime=true&allowOldPasswords=1", 101, 10000)
	//err = orm.RegisterDataBase("default", "mysql", "root"+":"+"wk123456"+"@tcp("+"127.0.0.1"+":"+"3306"+")/dingxin_main?timeout=30s&loc=Local&parseTime=true&allowOldPasswords=1", 101, 10000)

	if err != nil {
		logger.Error(err)
		return
	}
	orm.DefaultTimeLoc = time.Local
	orm.Debug = true
	//orm.SetMaxIdleConns("default", 101)
	//orm.SetMaxOpenConns("default", 500)
	//err = ORM.Using("platformLog")
	//logger.Error("err=", err)
	//注册model 建表
	//orm.RegisterModel(new(PlatformLog))

	//第一个是别名
	err = orm.RunSyncdb("platformLog", false, true)
	if err != nil {
		logger.Error(err)
		return
	}
	//Orm = GetOrmObject()
	//初始化数据
	//utils.InitData()
}
