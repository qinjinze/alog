package model

import (
	"alog/utils"
	"runtime"
	"time"

	_ "alog/utils"

	"github.com/beego/beego/orm"
	_ "github.com/go-sql-driver/mysql"
	"github.com/wonderivan/logger"
)

// 商城web日志

// APP、小程序日志
type AppletLog struct {
	Id             int64  `json:"AppletLogId"`                                                       //Id
	Level          string `orm:"size(255);description(日志等级)" json:"Level"`                           //
	Function       string `orm:"size(255);NULL;description(功能模块)" json:"Function"`                   //
	FullSellerName string `orm:"size(255);NULL;description(商家全称，通常是营业执照上的名称)" json:"FullSellerName"` //
	//Seller         string    `orm:"size(255);NULL;description(商家简称：网店名称)" json:"Seller"`                //
	RequestId string `orm:"size(30);NULL;description(每次请求的唯一id)" json:"RequestId"` //
	Token     string `orm:"size(255);NULL;description(用户登录唯一id)" json:"Token"`     //
	//UserName       string    `orm:"size(255);NULL;description(账户)" json:"UserName"`                     //
	Content    string    `orm:"size(255);description(日志内容)" json:"Content"` //
	Date       int64     `orm:"size(15);description(创建日期)" json:"Date"`
	CreateTime time.Time `orm:"size(6);description(创建时间)" json:"CreateTime"`
	//Id                int64  `json:"UserInfoLogId"`
	Seller            string `orm:"size(255);description(商家简称：网店名称)" json:"Seller"`                 //
	Goods             string `orm:"size(255);unique;description(商家编号)" json:"Goods"`                //
	System            string `orm:"size(30);NULL;description(手机系统)" json:"System"`                  //手机系统
	SystemLanguage    string `orm:"size(30);NULL;description(手机系统)" json:"SystemLanguage"`          //手机系统语言
	SystemVersion     string `orm:"size(30);NULL;description(手机系统版本)" json:"SystemVersion"`         //手机系统版本
	MobileModel       string `orm:"size(30);NULL;description(手机型号)" json:"MobileModel"`             // 手机型号
	MobileePixelRatio string `orm:"size(30);NULL;description(手机像素比)" json:"MobileePixelRatio"`      // 手机像素比
	WindowWidth       string `orm:"size(30);NULL;description(窗口宽度)" json:"WindowWidth"`             // 窗口宽度
	WindowHeight      string `orm:"size(30);NULL;description(窗口高度)" json:"WindowHeight"`            // 窗口高度
	AppletName        string `orm:"size(30);NULL;description(应用程序名称：微信、支付宝、抖音等)" json:"AppletName"` // 应用程序名称、微信、支付宝、抖音等
	Language          string `orm:"size(30);NULL;description(微信或通信工具设置的语言)" json:"Language"`        // 微信或通信工具设置的语言
	Version           string `orm:"size(30);NULL;description(微信或通信工具版本号)" json:"Version"`           // 微信或通信工具版本号
	//MerchantName      string    `orm:"size(30);NULL;description(商户名称)" json:"MerchantName"`                   // 商户名称
	//MerchantNo        string    `orm:"size(30);NULL;description(商户编号)" json:"MerchantNo"`                     // 商户编号
	Latitude       string    `orm:"size(30);NULL;description(小程序用户经度)" json:"Latitude"`                    // 用户经度
	Longitude      string    `orm:"size(30);NULL;description(小程序用户纬度)" json:"Longitude"`                   // 用户纬度
	UserTmpId      string    `orm:"size(30);NULL;description(小程序用户零时id)" json:"UserTmpId"`                 // 小程序用户零时id
	UserName       string    `orm:"size(30);NULL;description(小程序用户名字)" json:"UserName"`                    // 小程序用户名字
	Browser        string    `orm:"size(30);NULL;description(浏览器)" json:"Browser"`                         // 浏览器名称
	BrowserVersion string    `orm:"size(30);NULL;description(浏览器版本)" json:"BrowserVersion"`                // 浏览器版本
	AppletVersion  string    `orm:"size(30);NULL;description(小程序版本)" json:"AppletVersion"`                 // 小程序版本
	Mac            string    `orm:"size(30);NULL;description(请求的网卡地址)" json:"Mac"`                         //请求的网卡地址
	Ip             string    `orm:"size(150);NULL;description(请求的IP地址)" json:"Ip"`                         //请求的IP地址
	RequestPage    string    `orm:"size(30);NULL;description(请求所在页面)" json:"RequestPage"`                  //请求所在页面
	RequestUrl     string    `orm:"size(30);NULL;description(请求的Url)" json:"RequestUrl"`                   //请求的Url
	RequestType    string    `orm:"size(30);NULL;description(请求类型)" json:"RequestType"`                    //请求类型
	Params         string    `orm:"size(255);NULL;description(请求参数)" json:"Params"`                        //请求参数
	EventName      string    `orm:"size(255);NULL;description(事件名称)" json:"EventName"`                     //事件名称
	EventValue     string    `orm:"size(255);NULL;description(事件值)" json:"EventValue"`                     //事件值
	DoTime         time.Time `orm:"size(255);NULL;description(操作发生时间)" json:"DoTime"`                      //操作发生时间
	AcceptTime     time.Time `orm:"size(255);NULL;description(后台接收的时间)" json:"AcceptTime"`                 //后台接收的时间
	FailureReason  string    `orm:"size(255);NULL;description(用户发送事件请求每次失败的原因，用|区分)" json:"FailureReason"` //用户发送事件请求每次失败的原因，用|区分
	FailureTime    string    `orm:"size(255);NULL;description(用户发送事件请求每次失败的时间，用|区分)" json:"FailureTime"`   //用户发送事件请求每次失败的时间，用|区分
	Notes          string    `orm:"size(255);NULL;description(备注信息)" json:"notes"`                         //备注信息
}

// C端用户日志
type UserLog struct {
	Id         int64     `json:"UserLogId"`                                            //Id
	Level      string    `orm:"size(10);NULL;description(日志等级)" json:"Level"`          //
	LevelInt   int       `orm:"size(2);NULL;description(日志等级)" json:"LevelInt"`        //
	Function   string    `orm:"size(100);NULL;description(功能模块)" json:"Function"`      //
	RequestId  string    `orm:"size(30);NULL;description(每次请求的唯一id)" json:"RequestId"` //
	Token      string    `orm:"size(255);NULL;description(用户登录唯一id)" json:"Token"`     //
	UserName   string    `orm:"size(255);NULL;description(账户)" json:"UserName"`        //
	Content    string    `orm:"size(255);NULL;description(日志内容)" json:"Content"`       //
	LogTime    time.Time `orm:"size(15);NULL;description(日志时间)" json:"LogTime"`
	CreateTime time.Time `orm:"size(6);NULL;description(创建时间)" json:"CreateTime"`
	Seller     string    `orm:"size(255);NULL;description(商家简称：网店名称)" json:"Seller"` //
	SellerId   string    `orm:"size(100);NULL;description(商家编号)" json:"SellerId"`    //

}

// func UserLogInit() {
func ginit() {
	logger.Info("init UserLogInit model")
	sysType := runtime.GOOS
	logger.Info("sysType=", sysType)

	if sysType == "linux" {
		//LINUX系统
		logger.SetLogger(`{"File":{"filename":"/data/logs/remind/reminder.log","level":"TRAC","daily":false,"maxlines":700000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	}
	if sysType == "windows" {
		// windows系统
		logger.SetLogger(`{"File":{"filename":"reminder.log","level":"TRAC","daily":false,"maxlines":700000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	}

	//logger.SetLogger(`{"File":{"filename":"../logs/app.log","level":"TRAC","daily":false,"maxlines":1000000,"maxsize":104857600,"maxdays":-1,"append":true,"permit":"0660"}}`)
	//调用什么驱动
	err := orm.RegisterDriver("mysql", orm.DRMySQL)
	if err != nil {
		logger.Error(err)
		return
	}
	logger.Info("utils.G_mysql_addr=", utils.G_mysql_addr, "port=", utils.G_mysql_port)
	logger.Info("username=", utils.G_mysql_dbname, "utils.G_mysql_dbPassword=", utils.G_mysql_dbPassword)
	//连接数据   ( 默认参数 ，mysql数据库 ，"数据库的用户名 ：数据库密码@tcp("+数据库地址+":"+数据库端口+")/库名？格式",默认参数）
	err = orm.RegisterDataBase("userLog", "mysql", utils.G_mysql_dbname+":"+utils.G_mysql_dbPassword+"@tcp("+utils.G_mysql_addr+":"+utils.G_mysql_port+")/userLog?charset=utf8mb4&loc=Local", 101, 100)
	//err = orm.RegisterDataBase("default", "mysql", utils.G_mysql_dbname+":"+utils.G_mysql_dbPassword+"@tcp("+utils.G_mysql_addr+":"+utils.G_mysql_port+")/dingxin_main?timeout=30s&loc=Local&parseTime=true&allowOldPasswords=1", 101, 10000)
	//err = orm.RegisterDataBase("default", "mysql", "root"+":"+"wk123456"+"@tcp("+"127.0.0.1"+":"+"3306"+")/dingxin_main?timeout=30s&loc=Local&parseTime=true&allowOldPasswords=1", 101, 10000)

	if err != nil {
		logger.Error(err)
		return
	}
	orm.DefaultTimeLoc = time.Local
	orm.Debug = true
	//orm.SetMaxIdleConns("default", 101)
	//orm.SetMaxOpenConns("default", 500)

	//注册model 建表
	orm.RegisterModel(new(AppletLog), new(UserLog))

	//第一个是别名
	err = orm.RunSyncdb("userLog", false, true)
	if err != nil {
		logger.Error(err)
		return
	}

	//初始化数据
	//utils.InitData()
}
